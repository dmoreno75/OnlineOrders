// <auto-generated />
using System;
using FrozenLand.OnlineOrders.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FrozenLand.OnlineOrders.Data.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    [Migration("20210521083646_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.CardDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpireMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpireYear")
                        .HasColumnType("int");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderPaymentsCardDetails");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.CustomerAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("TotalDelivery")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalItemsCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.OrderDelivery", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSelected")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeslotId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("OrderDeliveries");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.OrderLine", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppliedPromotion")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sku")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SkuVariant")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.OrderPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardDetailsId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PayPalDetailsId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardDetailsId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("PayPalDetailsId");

                    b.ToTable("OrderPayments");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.PayPalDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AuthorisationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorisationCorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderPaymentsPayPalDetails");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.Customer", b =>
                {
                    b.HasOne("FrozenLand.OnlineOrders.Data.Order", null)
                        .WithOne("Customer")
                        .HasForeignKey("FrozenLand.OnlineOrders.Data.Customer", "OrderId");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.CustomerAddress", b =>
                {
                    b.HasOne("FrozenLand.OnlineOrders.Data.Customer", null)
                        .WithOne("Address")
                        .HasForeignKey("FrozenLand.OnlineOrders.Data.CustomerAddress", "CustomerId");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.OrderDelivery", b =>
                {
                    b.HasOne("FrozenLand.OnlineOrders.Data.Order", null)
                        .WithOne("Delivery")
                        .HasForeignKey("FrozenLand.OnlineOrders.Data.OrderDelivery", "OrderId");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.OrderLine", b =>
                {
                    b.HasOne("FrozenLand.OnlineOrders.Data.Order", null)
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.OrderPayment", b =>
                {
                    b.HasOne("FrozenLand.OnlineOrders.Data.CardDetails", "CardDetails")
                        .WithMany()
                        .HasForeignKey("CardDetailsId");

                    b.HasOne("FrozenLand.OnlineOrders.Data.Order", null)
                        .WithOne("Payment")
                        .HasForeignKey("FrozenLand.OnlineOrders.Data.OrderPayment", "OrderId");

                    b.HasOne("FrozenLand.OnlineOrders.Data.PayPalDetails", "PayPalDetails")
                        .WithMany()
                        .HasForeignKey("PayPalDetailsId");

                    b.Navigation("CardDetails");

                    b.Navigation("PayPalDetails");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.Customer", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("FrozenLand.OnlineOrders.Data.Order", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Delivery");

                    b.Navigation("OrderLines");

                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
